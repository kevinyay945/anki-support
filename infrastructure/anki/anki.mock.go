// Code generated by MockGen. DO NOT EDIT.
// Source: anki-support/infrastructure/anki (interfaces: Ankier)

// Package anki is a generated GoMock package.
package anki

import (
	reflect "reflect"

	ankiconnect "github.com/atselvan/ankiconnect"
	gomock "go.uber.org/mock/gomock"
)

// MockAnkier is a mock of Ankier interface.
type MockAnkier struct {
	ctrl     *gomock.Controller
	recorder *MockAnkierMockRecorder
}

// MockAnkierMockRecorder is the mock recorder for MockAnkier.
type MockAnkierMockRecorder struct {
	mock *MockAnkier
}

// NewMockAnkier creates a new mock instance.
func NewMockAnkier(ctrl *gomock.Controller) *MockAnkier {
	mock := &MockAnkier{ctrl: ctrl}
	mock.recorder = &MockAnkierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnkier) EXPECT() *MockAnkierMockRecorder {
	return m.recorder
}

// AddTagFromNote mocks base method.
func (m *MockAnkier) AddTagFromNote(arg0 int64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagFromNote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTagFromNote indicates an expected call of AddTagFromNote.
func (mr *MockAnkierMockRecorder) AddTagFromNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagFromNote", reflect.TypeOf((*MockAnkier)(nil).AddTagFromNote), arg0, arg1)
}

// DeleteTagFromNote mocks base method.
func (m *MockAnkier) DeleteTagFromNote(arg0 int64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagFromNote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTagFromNote indicates an expected call of DeleteTagFromNote.
func (mr *MockAnkierMockRecorder) DeleteTagFromNote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagFromNote", reflect.TypeOf((*MockAnkier)(nil).DeleteTagFromNote), arg0, arg1)
}

// EditNoteById mocks base method.
func (m *MockAnkier) EditNoteById(arg0 ankiconnect.ResultNotesInfo, arg1 []ankiconnect.Audio, arg2 []ankiconnect.Video, arg3 []ankiconnect.Picture) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditNoteById", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditNoteById indicates an expected call of EditNoteById.
func (mr *MockAnkierMockRecorder) EditNoteById(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditNoteById", reflect.TypeOf((*MockAnkier)(nil).EditNoteById), arg0, arg1, arg2, arg3)
}

// GetAllDeck mocks base method.
func (m *MockAnkier) GetAllDeck() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeck")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDeck indicates an expected call of GetAllDeck.
func (mr *MockAnkierMockRecorder) GetAllDeck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeck", reflect.TypeOf((*MockAnkier)(nil).GetAllDeck))
}

// GetAllNoteFromDeck mocks base method.
func (m *MockAnkier) GetAllNoteFromDeck(arg0 string) ([]ankiconnect.ResultNotesInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNoteFromDeck", arg0)
	ret0, _ := ret[0].([]ankiconnect.ResultNotesInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNoteFromDeck indicates an expected call of GetAllNoteFromDeck.
func (mr *MockAnkierMockRecorder) GetAllNoteFromDeck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNoteFromDeck", reflect.TypeOf((*MockAnkier)(nil).GetAllNoteFromDeck), arg0)
}

// GetMediaFolderPath mocks base method.
func (m *MockAnkier) GetMediaFolderPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediaFolderPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMediaFolderPath indicates an expected call of GetMediaFolderPath.
func (mr *MockAnkierMockRecorder) GetMediaFolderPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediaFolderPath", reflect.TypeOf((*MockAnkier)(nil).GetMediaFolderPath))
}

// GetNoteById mocks base method.
func (m *MockAnkier) GetNoteById(arg0 int64) (ankiconnect.ResultNotesInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteById", arg0)
	ret0, _ := ret[0].(ankiconnect.ResultNotesInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteById indicates an expected call of GetNoteById.
func (mr *MockAnkierMockRecorder) GetNoteById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteById", reflect.TypeOf((*MockAnkier)(nil).GetNoteById), arg0)
}

// GetTodoNoteFromDeck mocks base method.
func (m *MockAnkier) GetTodoNoteFromDeck(arg0 string) ([]ankiconnect.ResultNotesInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoNoteFromDeck", arg0)
	ret0, _ := ret[0].([]ankiconnect.ResultNotesInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoNoteFromDeck indicates an expected call of GetTodoNoteFromDeck.
func (mr *MockAnkierMockRecorder) GetTodoNoteFromDeck(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoNoteFromDeck", reflect.TypeOf((*MockAnkier)(nil).GetTodoNoteFromDeck), arg0)
}

// Ping mocks base method.
func (m *MockAnkier) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockAnkierMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAnkier)(nil).Ping))
}
