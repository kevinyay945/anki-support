// Code generated by MockGen. DO NOT EDIT.
// Source: anki-support/domain (interfaces: GPTer)

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGPTer is a mock of GPTer interface.
type MockGPTer struct {
	ctrl     *gomock.Controller
	recorder *MockGPTerMockRecorder
}

// MockGPTerMockRecorder is the mock recorder for MockGPTer.
type MockGPTerMockRecorder struct {
	mock *MockGPTer
}

// NewMockGPTer creates a new mock instance.
func NewMockGPTer(ctrl *gomock.Controller) *MockGPTer {
	mock := &MockGPTer{ctrl: ctrl}
	mock.recorder = &MockGPTerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGPTer) EXPECT() *MockGPTerMockRecorder {
	return m.recorder
}

// MakeJapaneseSentence mocks base method.
func (m *MockGPTer) MakeJapaneseSentence(arg0, arg1 string, arg2 []string) (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeJapaneseSentence", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// MakeJapaneseSentence indicates an expected call of MakeJapaneseSentence.
func (mr *MockGPTerMockRecorder) MakeJapaneseSentence(arg0, arg1, arg2 interface{}) *GPTerMakeJapaneseSentenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeJapaneseSentence", reflect.TypeOf((*MockGPTer)(nil).MakeJapaneseSentence), arg0, arg1, arg2)
	return &GPTerMakeJapaneseSentenceCall{Call: call}
}

// GPTerMakeJapaneseSentenceCall wrap *gomock.Call
type GPTerMakeJapaneseSentenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GPTerMakeJapaneseSentenceCall) Return(arg0, arg1, arg2 string, arg3 error) *GPTerMakeJapaneseSentenceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GPTerMakeJapaneseSentenceCall) Do(f func(string, string, []string) (string, string, string, error)) *GPTerMakeJapaneseSentenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GPTerMakeJapaneseSentenceCall) DoAndReturn(f func(string, string, []string) (string, string, string, error)) *GPTerMakeJapaneseSentenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
