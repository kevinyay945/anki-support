// Code generated by MockGen. DO NOT EDIT.
// Source: anki-support/lib/anki (interfaces: Ankier)

// Package anki is a generated GoMock package.
package anki

import (
	reflect "reflect"

	ankiconnect "github.com/atselvan/ankiconnect"
	gomock "go.uber.org/mock/gomock"
)

// MockAnkier is a mock of Ankier interface.
type MockAnkier struct {
	ctrl     *gomock.Controller
	recorder *MockAnkierMockRecorder
}

// MockAnkierMockRecorder is the mock recorder for MockAnkier.
type MockAnkierMockRecorder struct {
	mock *MockAnkier
}

// NewMockAnkier creates a new mock instance.
func NewMockAnkier(ctrl *gomock.Controller) *MockAnkier {
	mock := &MockAnkier{ctrl: ctrl}
	mock.recorder = &MockAnkierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnkier) EXPECT() *MockAnkierMockRecorder {
	return m.recorder
}

// AddTagFromNote mocks base method.
func (m *MockAnkier) AddTagFromNote(arg0 int64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagFromNote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTagFromNote indicates an expected call of AddTagFromNote.
func (mr *MockAnkierMockRecorder) AddTagFromNote(arg0, arg1 interface{}) *AnkierAddTagFromNoteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagFromNote", reflect.TypeOf((*MockAnkier)(nil).AddTagFromNote), arg0, arg1)
	return &AnkierAddTagFromNoteCall{Call: call}
}

// AnkierAddTagFromNoteCall wrap *gomock.Call
type AnkierAddTagFromNoteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *AnkierAddTagFromNoteCall) Return(arg0 error) *AnkierAddTagFromNoteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *AnkierAddTagFromNoteCall) Do(f func(int64, string) error) *AnkierAddTagFromNoteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *AnkierAddTagFromNoteCall) DoAndReturn(f func(int64, string) error) *AnkierAddTagFromNoteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteTagFromNote mocks base method.
func (m *MockAnkier) DeleteTagFromNote(arg0 int64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTagFromNote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTagFromNote indicates an expected call of DeleteTagFromNote.
func (mr *MockAnkierMockRecorder) DeleteTagFromNote(arg0, arg1 interface{}) *AnkierDeleteTagFromNoteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagFromNote", reflect.TypeOf((*MockAnkier)(nil).DeleteTagFromNote), arg0, arg1)
	return &AnkierDeleteTagFromNoteCall{Call: call}
}

// AnkierDeleteTagFromNoteCall wrap *gomock.Call
type AnkierDeleteTagFromNoteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *AnkierDeleteTagFromNoteCall) Return(arg0 error) *AnkierDeleteTagFromNoteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *AnkierDeleteTagFromNoteCall) Do(f func(int64, string) error) *AnkierDeleteTagFromNoteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *AnkierDeleteTagFromNoteCall) DoAndReturn(f func(int64, string) error) *AnkierDeleteTagFromNoteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EditNoteById mocks base method.
func (m *MockAnkier) EditNoteById(arg0 ankiconnect.ResultNotesInfo, arg1 []ankiconnect.Audio, arg2 []ankiconnect.Video, arg3 []ankiconnect.Picture) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditNoteById", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditNoteById indicates an expected call of EditNoteById.
func (mr *MockAnkierMockRecorder) EditNoteById(arg0, arg1, arg2, arg3 interface{}) *AnkierEditNoteByIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditNoteById", reflect.TypeOf((*MockAnkier)(nil).EditNoteById), arg0, arg1, arg2, arg3)
	return &AnkierEditNoteByIdCall{Call: call}
}

// AnkierEditNoteByIdCall wrap *gomock.Call
type AnkierEditNoteByIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *AnkierEditNoteByIdCall) Return(arg0 error) *AnkierEditNoteByIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *AnkierEditNoteByIdCall) Do(f func(ankiconnect.ResultNotesInfo, []ankiconnect.Audio, []ankiconnect.Video, []ankiconnect.Picture) error) *AnkierEditNoteByIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *AnkierEditNoteByIdCall) DoAndReturn(f func(ankiconnect.ResultNotesInfo, []ankiconnect.Audio, []ankiconnect.Video, []ankiconnect.Picture) error) *AnkierEditNoteByIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllDeck mocks base method.
func (m *MockAnkier) GetAllDeck() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeck")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDeck indicates an expected call of GetAllDeck.
func (mr *MockAnkierMockRecorder) GetAllDeck() *AnkierGetAllDeckCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeck", reflect.TypeOf((*MockAnkier)(nil).GetAllDeck))
	return &AnkierGetAllDeckCall{Call: call}
}

// AnkierGetAllDeckCall wrap *gomock.Call
type AnkierGetAllDeckCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *AnkierGetAllDeckCall) Return(arg0 []string, arg1 error) *AnkierGetAllDeckCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *AnkierGetAllDeckCall) Do(f func() ([]string, error)) *AnkierGetAllDeckCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *AnkierGetAllDeckCall) DoAndReturn(f func() ([]string, error)) *AnkierGetAllDeckCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllNoteFromDeck mocks base method.
func (m *MockAnkier) GetAllNoteFromDeck(arg0 string) ([]ankiconnect.ResultNotesInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNoteFromDeck", arg0)
	ret0, _ := ret[0].([]ankiconnect.ResultNotesInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNoteFromDeck indicates an expected call of GetAllNoteFromDeck.
func (mr *MockAnkierMockRecorder) GetAllNoteFromDeck(arg0 interface{}) *AnkierGetAllNoteFromDeckCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNoteFromDeck", reflect.TypeOf((*MockAnkier)(nil).GetAllNoteFromDeck), arg0)
	return &AnkierGetAllNoteFromDeckCall{Call: call}
}

// AnkierGetAllNoteFromDeckCall wrap *gomock.Call
type AnkierGetAllNoteFromDeckCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *AnkierGetAllNoteFromDeckCall) Return(arg0 []ankiconnect.ResultNotesInfo, arg1 error) *AnkierGetAllNoteFromDeckCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *AnkierGetAllNoteFromDeckCall) Do(f func(string) ([]ankiconnect.ResultNotesInfo, error)) *AnkierGetAllNoteFromDeckCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *AnkierGetAllNoteFromDeckCall) DoAndReturn(f func(string) ([]ankiconnect.ResultNotesInfo, error)) *AnkierGetAllNoteFromDeckCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMediaFolderPath mocks base method.
func (m *MockAnkier) GetMediaFolderPath() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediaFolderPath")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMediaFolderPath indicates an expected call of GetMediaFolderPath.
func (mr *MockAnkierMockRecorder) GetMediaFolderPath() *AnkierGetMediaFolderPathCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediaFolderPath", reflect.TypeOf((*MockAnkier)(nil).GetMediaFolderPath))
	return &AnkierGetMediaFolderPathCall{Call: call}
}

// AnkierGetMediaFolderPathCall wrap *gomock.Call
type AnkierGetMediaFolderPathCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *AnkierGetMediaFolderPathCall) Return(arg0 string, arg1 error) *AnkierGetMediaFolderPathCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *AnkierGetMediaFolderPathCall) Do(f func() (string, error)) *AnkierGetMediaFolderPathCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *AnkierGetMediaFolderPathCall) DoAndReturn(f func() (string, error)) *AnkierGetMediaFolderPathCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNoteById mocks base method.
func (m *MockAnkier) GetNoteById(arg0 int64) (ankiconnect.ResultNotesInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteById", arg0)
	ret0, _ := ret[0].(ankiconnect.ResultNotesInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteById indicates an expected call of GetNoteById.
func (mr *MockAnkierMockRecorder) GetNoteById(arg0 interface{}) *AnkierGetNoteByIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteById", reflect.TypeOf((*MockAnkier)(nil).GetNoteById), arg0)
	return &AnkierGetNoteByIdCall{Call: call}
}

// AnkierGetNoteByIdCall wrap *gomock.Call
type AnkierGetNoteByIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *AnkierGetNoteByIdCall) Return(arg0 ankiconnect.ResultNotesInfo, arg1 error) *AnkierGetNoteByIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *AnkierGetNoteByIdCall) Do(f func(int64) (ankiconnect.ResultNotesInfo, error)) *AnkierGetNoteByIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *AnkierGetNoteByIdCall) DoAndReturn(f func(int64) (ankiconnect.ResultNotesInfo, error)) *AnkierGetNoteByIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNoteFromDeckByTagName mocks base method.
func (m *MockAnkier) GetNoteFromDeckByTagName(arg0, arg1 string) ([]ankiconnect.ResultNotesInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteFromDeckByTagName", arg0, arg1)
	ret0, _ := ret[0].([]ankiconnect.ResultNotesInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteFromDeckByTagName indicates an expected call of GetNoteFromDeckByTagName.
func (mr *MockAnkierMockRecorder) GetNoteFromDeckByTagName(arg0, arg1 interface{}) *AnkierGetNoteFromDeckByTagNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteFromDeckByTagName", reflect.TypeOf((*MockAnkier)(nil).GetNoteFromDeckByTagName), arg0, arg1)
	return &AnkierGetNoteFromDeckByTagNameCall{Call: call}
}

// AnkierGetNoteFromDeckByTagNameCall wrap *gomock.Call
type AnkierGetNoteFromDeckByTagNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *AnkierGetNoteFromDeckByTagNameCall) Return(arg0 []ankiconnect.ResultNotesInfo, arg1 error) *AnkierGetNoteFromDeckByTagNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *AnkierGetNoteFromDeckByTagNameCall) Do(f func(string, string) ([]ankiconnect.ResultNotesInfo, error)) *AnkierGetNoteFromDeckByTagNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *AnkierGetNoteFromDeckByTagNameCall) DoAndReturn(f func(string, string) ([]ankiconnect.ResultNotesInfo, error)) *AnkierGetNoteFromDeckByTagNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Ping mocks base method.
func (m *MockAnkier) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockAnkierMockRecorder) Ping() *AnkierPingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAnkier)(nil).Ping))
	return &AnkierPingCall{Call: call}
}

// AnkierPingCall wrap *gomock.Call
type AnkierPingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *AnkierPingCall) Return(arg0 error) *AnkierPingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *AnkierPingCall) Do(f func() error) *AnkierPingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *AnkierPingCall) DoAndReturn(f func() error) *AnkierPingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
