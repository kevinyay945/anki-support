<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="ALL" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="c58485f3-c2d5-44e5-a558-1d0bc98d894d" name="Changes" comment="feat: normal card finish">
      <change beforePath="$PROJECT_DIR$/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/application/anki_operator_adj.go" beforeDir="false" afterPath="$PROJECT_DIR$/application/anki_operator_adj.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/application/anki_operator_factory.go" beforeDir="false" afterPath="$PROJECT_DIR$/application/anki_operator_factory.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/application/anki_operator_normal.go" beforeDir="false" afterPath="$PROJECT_DIR$/application/anki_operator_normal.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/cmd/run.go" beforeDir="false" afterPath="$PROJECT_DIR$/cmd/run.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/lib/anki/anki.go" beforeDir="false" afterPath="$PROJECT_DIR$/lib/anki/anki.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/lib/anki/anki_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/lib/anki/anki_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/lib/openai/make_sentence.go" beforeDir="false" afterPath="$PROJECT_DIR$/lib/openai/make_sentence.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/lib/openai/make_sentence_test.go" beforeDir="false" afterPath="$PROJECT_DIR$/lib/openai/make_sentence_test.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/lib/openai/openai.go" beforeDir="false" afterPath="$PROJECT_DIR$/lib/openai/openai.go" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Go File" />
      </list>
    </option>
  </component>
  <component name="GOROOT" url="file://$USER_HOME$/.gvm/gos/go1.21" />
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;customColor&quot;: &quot;&quot;,
  &quot;associatedIndex&quot;: 3
}</component>
  <component name="ProjectId" id="2Vqi13Hb7GA3Be08w99aI4ZX5Fk" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;DefaultGoTemplateProperty&quot;: &quot;Go File&quot;,
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.formatter.settings.were.checked&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.migrated.go.modules.settings&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.modules.automatic.dependencies.download&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.modules.go.list.on.any.changes.was.set&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
    &quot;go.import.settings.migrated&quot;: &quot;true&quot;,
    &quot;go.sdk.automatically.set&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;/Users/kevin&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="GoMoveDeclarationDialog.RECENT_KEY">
      <recent name="$PROJECT_DIR$/interfaces" />
      <recent name="$PROJECT_DIR$/application" />
    </key>
    <key name="GoExtractInterfaceDialog.RECENT_KEY">
      <recent name="$PROJECT_DIR$/application" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/interfaces/cmd" />
      <recent name="$PROJECT_DIR$/application" />
    </key>
  </component>
  <component name="RunManager" selected="Go Build.go build anki-support">
    <configuration name="go build anki-support" type="GoApplicationRunConfiguration" factoryName="Go Application" nameIsGenerated="true">
      <module name="anki-support" />
      <working_directory value="$PROJECT_DIR$" />
      <parameters value="run" />
      <kind value="PACKAGE" />
      <package value="anki-support" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <output_directory value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="TestSuiteInitRun/Test_run_for_specific_deck in anki-support/interfaces/cmd" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="anki-support" />
      <working_directory value="$PROJECT_DIR$/interfaces/cmd" />
      <parameters value=" -testify.m ^Test_run_for_specific_deck$" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="anki-support/interfaces/cmd" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTestSuiteInitRun\E$/^\QTest_run_for_specific_deck\E$" />
      <method v="2" />
    </configuration>
    <configuration name="Test_Get_anki_todo_note_by_deck_name in anki-support/application" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="anki-support" />
      <working_directory value="$PROJECT_DIR$/application" />
      <parameters value=" -testify.m ^Test_Get_anki_todo_note_by_deck_name$" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="anki-support/application" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTestSuiteInitAnkiRepository\E$/^\QTest_Get_anki_todo_note_by_deck_name\E$" />
      <method v="2" />
    </configuration>
    <configuration name="Test_get_todo_note_from_deck_name in anki-support/lib/anki" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="anki-support" />
      <working_directory value="$PROJECT_DIR$/lib/anki" />
      <parameters value=" -testify.m ^Test_get_todo_note_from_deck_name$" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="anki-support/lib/anki" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTestSuiteInitAnki\E$/^\QTest_get_todo_note_from_deck_name\E$" />
      <method v="2" />
    </configuration>
    <configuration name="Test_make_japanese_sentence in anki-support/lib/openai" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="anki-support" />
      <working_directory value="$PROJECT_DIR$/lib/openai" />
      <parameters value=" -testify.m ^Test_make_japanese_sentence$" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="anki-support/lib/openai" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTestSuiteInitMakeSentence\E$/^\QTest_make_japanese_sentence\E$" />
      <method v="2" />
    </configuration>
    <configuration name="Test_normal_operator in anki-support/application" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="anki-support" />
      <working_directory value="$PROJECT_DIR$/application" />
      <parameters value=" -testify.m ^Test_normal_operator$" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="anki-support/application" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTestSuiteInitOperator\E$/^\QTest_normal_operator\E$" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Go Build.go build anki-support" />
      <item itemvalue="Go Test.Test_get_todo_note_from_deck_name in anki-support/lib/anki" />
      <item itemvalue="Go Test.Test_make_japanese_sentence in anki-support/lib/openai" />
      <item itemvalue="Go Test.Test_normal_operator in anki-support/application" />
      <item itemvalue="Go Test.Test_Get_anki_todo_note_by_deck_name in anki-support/application" />
      <item itemvalue="Go Test.TestSuiteInitRun/Test_run_for_specific_deck in anki-support/interfaces/cmd" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Go Test.Test_get_todo_note_from_deck_name in anki-support/lib/anki" />
        <item itemvalue="Go Test.Test_make_japanese_sentence in anki-support/lib/openai" />
        <item itemvalue="Go Test.Test_normal_operator in anki-support/application" />
        <item itemvalue="Go Test.TestSuiteInitRun/Test_run_for_specific_deck in anki-support/interfaces/cmd" />
        <item itemvalue="Go Test.Test_Get_anki_todo_note_by_deck_name in anki-support/application" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_SMELLS_BEFORE_PROJECT_COMMIT" value="false" />
    <option name="CODE_SMELLS_PROFILE" value="Project Default" />
    <MESSAGE value="fix: goland can't detect method and fix name" />
    <MESSAGE value="feat: finish normal operator test case" />
    <MESSAGE value="feat: add run cmd" />
    <MESSAGE value="feat: normal card finish" />
    <option name="LAST_COMMIT_MESSAGE" value="feat: normal card finish" />
  </component>
  <component name="VgoProject">
    <settings-migrated>true</settings-migrated>
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="DlvLineBreakpoint">
          <url>file://$PROJECT_DIR$/interfaces/cmd/run.go</url>
          <line>28</line>
          <option name="timeStamp" value="1" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="DlvLineBreakpoint">
          <url>file://$PROJECT_DIR$/interfaces/cmd/run.go</url>
          <line>38</line>
          <option name="timeStamp" value="2" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>