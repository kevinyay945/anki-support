// Code generated by MockGen. DO NOT EDIT.
// Source: anki-support/application (interfaces: AnkiOperatorFactorier)

// Package application is a generated GoMock package.
package application

import (
	domain "anki-support/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAnkiOperatorFactorier is a mock of AnkiOperatorFactorier interface.
type MockAnkiOperatorFactorier struct {
	ctrl     *gomock.Controller
	recorder *MockAnkiOperatorFactorierMockRecorder
}

// MockAnkiOperatorFactorierMockRecorder is the mock recorder for MockAnkiOperatorFactorier.
type MockAnkiOperatorFactorierMockRecorder struct {
	mock *MockAnkiOperatorFactorier
}

// NewMockAnkiOperatorFactorier creates a new mock instance.
func NewMockAnkiOperatorFactorier(ctrl *gomock.Controller) *MockAnkiOperatorFactorier {
	mock := &MockAnkiOperatorFactorier{ctrl: ctrl}
	mock.recorder = &MockAnkiOperatorFactorierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnkiOperatorFactorier) EXPECT() *MockAnkiOperatorFactorierMockRecorder {
	return m.recorder
}

// CreateByNote mocks base method.
func (m *MockAnkiOperatorFactorier) CreateByNote(arg0 domain.AnkiNote, arg1 []string) (AnkiOperator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByNote", arg0, arg1)
	ret0, _ := ret[0].(AnkiOperator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByNote indicates an expected call of CreateByNote.
func (mr *MockAnkiOperatorFactorierMockRecorder) CreateByNote(arg0, arg1 interface{}) *AnkiOperatorFactorierCreateByNoteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByNote", reflect.TypeOf((*MockAnkiOperatorFactorier)(nil).CreateByNote), arg0, arg1)
	return &AnkiOperatorFactorierCreateByNoteCall{Call: call}
}

// AnkiOperatorFactorierCreateByNoteCall wrap *gomock.Call
type AnkiOperatorFactorierCreateByNoteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *AnkiOperatorFactorierCreateByNoteCall) Return(arg0 AnkiOperator, arg1 error) *AnkiOperatorFactorierCreateByNoteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *AnkiOperatorFactorierCreateByNoteCall) Do(f func(domain.AnkiNote, []string) (AnkiOperator, error)) *AnkiOperatorFactorierCreateByNoteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *AnkiOperatorFactorierCreateByNoteCall) DoAndReturn(f func(domain.AnkiNote, []string) (AnkiOperator, error)) *AnkiOperatorFactorierCreateByNoteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
