// Code generated by MockGen. DO NOT EDIT.
// Source: anki-support/application (interfaces: AnkiOperator)

// Package application is a generated GoMock package.
package application

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAnkiOperator is a mock of AnkiOperator interface.
type MockAnkiOperator struct {
	ctrl     *gomock.Controller
	recorder *MockAnkiOperatorMockRecorder
}

// MockAnkiOperatorMockRecorder is the mock recorder for MockAnkiOperator.
type MockAnkiOperatorMockRecorder struct {
	mock *MockAnkiOperator
}

// NewMockAnkiOperator creates a new mock instance.
func NewMockAnkiOperator(ctrl *gomock.Controller) *MockAnkiOperator {
	mock := &MockAnkiOperator{ctrl: ctrl}
	mock.recorder = &MockAnkiOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnkiOperator) EXPECT() *MockAnkiOperatorMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockAnkiOperator) Do() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do")
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockAnkiOperatorMockRecorder) Do() *AnkiOperatorDoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockAnkiOperator)(nil).Do))
	return &AnkiOperatorDoCall{Call: call}
}

// AnkiOperatorDoCall wrap *gomock.Call
type AnkiOperatorDoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *AnkiOperatorDoCall) Return(arg0 error) *AnkiOperatorDoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *AnkiOperatorDoCall) Do(f func() error) *AnkiOperatorDoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *AnkiOperatorDoCall) DoAndReturn(f func() error) *AnkiOperatorDoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
