// Code generated by MockGen. DO NOT EDIT.
// Source: anki-support/application (interfaces: AnkiRepositorier)

// Package application is a generated GoMock package.
package application

import (
	domain "anki-support/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAnkiRepositorier is a mock of AnkiRepositorier interface.
type MockAnkiRepositorier struct {
	ctrl     *gomock.Controller
	recorder *MockAnkiRepositorierMockRecorder
}

// MockAnkiRepositorierMockRecorder is the mock recorder for MockAnkiRepositorier.
type MockAnkiRepositorierMockRecorder struct {
	mock *MockAnkiRepositorier
}

// NewMockAnkiRepositorier creates a new mock instance.
func NewMockAnkiRepositorier(ctrl *gomock.Controller) *MockAnkiRepositorier {
	mock := &MockAnkiRepositorier{ctrl: ctrl}
	mock.recorder = &MockAnkiRepositorierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnkiRepositorier) EXPECT() *MockAnkiRepositorierMockRecorder {
	return m.recorder
}

// GetAllNotesByDeckName mocks base method.
func (m *MockAnkiRepositorier) GetAllNotesByDeckName(arg0 string) ([]domain.AnkiNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotesByDeckName", arg0)
	ret0, _ := ret[0].([]domain.AnkiNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotesByDeckName indicates an expected call of GetAllNotesByDeckName.
func (mr *MockAnkiRepositorierMockRecorder) GetAllNotesByDeckName(arg0 interface{}) *AnkiRepositorierGetAllNotesByDeckNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotesByDeckName", reflect.TypeOf((*MockAnkiRepositorier)(nil).GetAllNotesByDeckName), arg0)
	return &AnkiRepositorierGetAllNotesByDeckNameCall{Call: call}
}

// AnkiRepositorierGetAllNotesByDeckNameCall wrap *gomock.Call
type AnkiRepositorierGetAllNotesByDeckNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *AnkiRepositorierGetAllNotesByDeckNameCall) Return(arg0 []domain.AnkiNote, arg1 error) *AnkiRepositorierGetAllNotesByDeckNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *AnkiRepositorierGetAllNotesByDeckNameCall) Do(f func(string) ([]domain.AnkiNote, error)) *AnkiRepositorierGetAllNotesByDeckNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *AnkiRepositorierGetAllNotesByDeckNameCall) DoAndReturn(f func(string) ([]domain.AnkiNote, error)) *AnkiRepositorierGetAllNotesByDeckNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllTodoNotesByDeckName mocks base method.
func (m *MockAnkiRepositorier) GetAllTodoNotesByDeckName(arg0 string) ([]domain.AnkiNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTodoNotesByDeckName", arg0)
	ret0, _ := ret[0].([]domain.AnkiNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTodoNotesByDeckName indicates an expected call of GetAllTodoNotesByDeckName.
func (mr *MockAnkiRepositorierMockRecorder) GetAllTodoNotesByDeckName(arg0 interface{}) *AnkiRepositorierGetAllTodoNotesByDeckNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTodoNotesByDeckName", reflect.TypeOf((*MockAnkiRepositorier)(nil).GetAllTodoNotesByDeckName), arg0)
	return &AnkiRepositorierGetAllTodoNotesByDeckNameCall{Call: call}
}

// AnkiRepositorierGetAllTodoNotesByDeckNameCall wrap *gomock.Call
type AnkiRepositorierGetAllTodoNotesByDeckNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *AnkiRepositorierGetAllTodoNotesByDeckNameCall) Return(arg0 []domain.AnkiNote, arg1 error) *AnkiRepositorierGetAllTodoNotesByDeckNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *AnkiRepositorierGetAllTodoNotesByDeckNameCall) Do(f func(string) ([]domain.AnkiNote, error)) *AnkiRepositorierGetAllTodoNotesByDeckNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *AnkiRepositorierGetAllTodoNotesByDeckNameCall) DoAndReturn(f func(string) ([]domain.AnkiNote, error)) *AnkiRepositorierGetAllTodoNotesByDeckNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
